name: build

on: [push]

env:
  nodeVersion: '18.12.1'

jobs:

  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Create GH release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          gh release create "${{github.ref_name}}" \
            --draft \
            --title="${{github.ref_name}}" \
            --repo="$GITHUB_REPOSITORY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install development packages
        run: |
          sudo apt-get update
          sudo apt-get install pkg-config build-essential cmake make fuse \
            xserver-xorg-core mesa-common-dev libglu1-mesa-dev \
            libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 \
            libxcb-render-util0 libxcb-xinerama0
      - name: Set up pkg2appimage
        run: |
          wget -c https://github.com/AppImageCommunity/pkg2appimage/releases/download/continuous/pkg2appimage-1eceb30-x86_64.AppImage
          chmod +x ./pkg2appimage-*.AppImage
          mv pkg2appimage-*.AppImage pkg2appimage.AppImage
          ls -alp
          sudo mv pkg2appimage.AppImage /usr/local/bin
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.nodeVersion }}
      - name: Install dependencies
        run: yarn install
      - name: Download launcher executable
        run: yarn run download-launcher-executable
      - name: Lint strict
        run: yarn run lint-strict
      - name: Build
        run: yarn run build
      - name: Test
        run: yarn run test
      - name: Package
        run: yarn run package
      - name: Copy Linux-build-zip-output
        uses: actions/upload-artifact@v4
        with:
          name: Linux-build-zip-output
          path: |
            ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.zip
      - name: Copy Linux-build-deb-output
        uses: actions/upload-artifact@v4
        with:
          name: Linux-build-deb-output
          path: |
            ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.deb
      - name: Copy Linux-build-appimage-output
        uses: actions/upload-artifact@v4
        with:
          name: Linux-build-appimage-output
          path: |
            ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.AppImage
      - name: Download extraterm-commands
        if: startsWith(github.ref, 'refs/tags/')
        run: yarn run download-extraterm-commands

      - name: Upload to GH release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
            gh release upload "${{github.ref_name}}" \
              ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.zip \
              ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.deb \
              ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.AppImage \
              ./downloads/extraterm-commands*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    runs-on: windows-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install nsis
        run: choco install nsis -y
      - name: Install zip
        run: choco install zip -y
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.nodeVersion }}
      - name: Install dependencies
        run: yarn install
      - name: Download launcher executable
        run: yarn run download-launcher-executable
      - name: Lint strict
        run: yarn run lint-strict
      - name: Build
        run: yarn run build
      - name: Test
        run: yarn run test
      - name: Package
        run: yarn run package
      - name: Copy Windows-build-zip-output
        uses: actions/upload-artifact@v4
        with:
          name: Windows-build-zip-output
          path: |
            ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.zip
      - name: Copy Windows-build-exe-output
        uses: actions/upload-artifact@v4
        with:
          name: Windows-build-exe-output
          path: |
            ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.exe
      - name: Upload to GH release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
            gh release upload "${{github.ref_name}}" (get-item ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.exe)
            gh release upload "${{github.ref_name}}" (get-item ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.zip)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    runs-on: macos-13
    needs: create-release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.nodeVersion }}
      - name: Install dependencies
        run: yarn install
      - name: Download launcher executable
        run: yarn run download-launcher-executable
      - name: Lint strict
        run: yarn run lint-strict
      - name: Build
        run: yarn run build
      - name: Test
        run: yarn run test
      - name: Package
        run: yarn run package
      - name: Copy macOS-build-zip-output
        uses: actions/upload-artifact@v4
        with:
          name: macOS-build-zip-output
          path: |
            ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.zip
      - name: Copy macOS-build-dmg-output
        uses: actions/upload-artifact@v4
        with:
          name: macOS-build-dmg-output
          path: |
            ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.dmg
      - name: Upload to GH release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
            gh release upload "${{github.ref_name}}" \
              ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.zip \
              ./tmp-jam-pack-nodegui/jam-pack-nodegui-work/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
