name: $(Date:yyyyMMdd)$(Rev:.r)_$(SourceBranchName)

variables:
  nodeVersion: '14.15.4'

trigger:
  branches:
    include:
    - master
    - release/*
  tags:
    include:
    - v*

jobs:
  - job: commands_zip
    displayName: "Build commands.zip"
    pool:
      vmImage: 'Ubuntu-18.04'
    steps:
      - script: yarn install --frozen-lockfile
        displayName: 'Yarn install'
      - script: node build_scripts/azure_release_version_check.js $(Build.SourceBranch)
        displayName: Check for tag and package.json version
      - script: yarn run package-commands-zip --version=$(git describe --tags)
        displayName: 'Run yarn package-commands-zip'
      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/build_tmp'
          contents: '*.zip'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'commands build output'
          targetPath: '$(Build.ArtifactStagingDirectory)'

  - job: package_linux
    displayName: "Build Linux packages"
    pool:
      vmImage: 'Ubuntu-18.04'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: $(nodeVersion)
      - script: yarn --version
        displayName: "yarn --version"
      - script: yarn install --frozen-lockfile
        displayName: "yarn install"
      - script: node build_scripts/azure_release_version_check.js $(Build.SourceBranch)
        displayName: Check for tag and package.json version
      - script: yarn run electron-rebuild
        displayName: "yarn run electron-rebuild"
      - script: yarn run lint-strict
        displayName: "yarn run lint-strict"
      - script: yarn run build
        displayName: "yarn run build"
      - script: yarn run test
        displayName: "yarn run test"
      - script: yarn run package-linux --version=$(git describe --tags)
        displayName: "yarn run package-linux"
      - script: cp $(Build.SourcesDirectory)/build_tmp/*.zip $(Build.ArtifactStagingDirectory)
      - script: cp $(Build.SourcesDirectory)/build_tmp/*.deb $(Build.ArtifactStagingDirectory)
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'Linux build output'
          targetPath: '$(Build.ArtifactStagingDirectory)'

  - job: package_windows
    displayName: "Build Windows packages"
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - script: choco install nsis -y
        displayName: "install nsis"
      - script: choco install zip -y
        displayName: "install zip"
      - task: NodeTool@0
        inputs:
          versionSpec: $(nodeVersion)
      # We've been hitting https://github.com/yarnpkg/yarn/issues/2429 and
      # https://github.com/nodejs/node-gyp/issues/1054 for years. Basically,
      # concurrent node-gyp runs from yarn will corrupt each other.
      # So we set the yarn concurrency to 1.
      - script: yarn config set child-concurrency 1
        displayName: yarn child-concurrency=1
      - script: yarn install --frozen-lockfile
        displayName: "yarn install"
      - script: node build_scripts/azure_release_version_check.js $(Build.SourceBranch)
        displayName: Check for tag and package.json version
      - script: yarn run electron-rebuild-win32
        displayName: "yarn run electron-rebuild-win32"
      - script: yarn run lint-strict
        displayName: "yarn run lint-strict"
      - script: yarn run build
        displayName: "yarn run build"
      - script: yarn run test
        displayName: "yarn run test"
      - script: |
          PATH=C:\Program Files (x86)\NSIS\;%PATH%
          git describe --tags > APP_VERSION.txt
          set /p APP_VERSION= < APP_VERSION.txt
          del APP_VERSION.txt
          yarn run package-windows --version=%APP_VERSION%
        displayName: "yarn run package-windows"
      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/build_tmp'
          contents: '*.zip'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/build_tmp'
          contents: '*.exe'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'Windows build output'
          targetPath: '$(Build.ArtifactStagingDirectory)'

  - job: package_macos
    displayName: "Build macOS packages"
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: $(nodeVersion)
      - script: yarn install --frozen-lockfile
        displayName: "yarn install"
      - script: node build_scripts/azure_release_version_check.js $(Build.SourceBranch)
        displayName: Check for tag and package.json version
      - script: yarn run electron-rebuild
        displayName: "yarn run electron-rebuild"
      - script: yarn run lint-strict
        displayName: "yarn run lint-strict"
      - script: yarn run build
        displayName: "yarn run build"
      - script: yarn run test
        displayName: "yarn run test"
      - script: yarn run package-macos --version=$(git describe --tags)
        displayName: "yarn run package-macos"
      - script: |
          cp $(Build.SourcesDirectory)/build_tmp/*.zip $(Build.ArtifactStagingDirectory)
          cp $(Build.SourcesDirectory)/build_tmp/*.dmg $(Build.ArtifactStagingDirectory)
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'macOS build output'
          targetPath: '$(Build.ArtifactStagingDirectory)'
